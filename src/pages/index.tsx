import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useMemo, useState } from "react";

const Home: NextPage = () => {
  const [hasSubmitted, setHasSubmitted] = useState(false);

  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");

  const utils = trpc.useContext();

  const { data, isLoading } = trpc.useQuery(["example.getAll"]);

  const { mutate, isLoading: isSubmitting } = trpc.useMutation(
    ["example.addNote"],
    {
      onSuccess: () => {
        utils.invalidateQueries(["example.getAll"]);
        setHasSubmitted(true);
        setTitle("");
        setContent("");
      },
      onError: (error) => {
        console.error(error.message);
      },
    }
  );

  const reversedNotes = useMemo(() => {
    // copy notes array
    if (!data) return [];

    const notes = [...data.notes];

    return notes.reverse();
  }, [data]);

  return (
    <>
      <Head>
        <title>Noted App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col items-center justify-center min-h-screen">
        <h1 className="font-extrabold mt-4 text-center text-7xl px-3">
          <span className="text-blue-500">Noted</span> App
        </h1>
        <div className="w-screen max-w-xl p-6">
          <FormField label="Title">
            <input
              onChange={(e) => setTitle(e.target.value)}
              className="w-full p-2 border-2 border-gray-300 rounded-lg"
              type="text"
              value={title}
              maxLength={20}
              placeholder="Enter a title"
            />
          </FormField>
          <FormField label="Content">
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              className="w-full p-2 border-2 border-gray-300 rounded-lg"
              placeholder="Enter your content"
              maxLength={200}
            />
          </FormField>
          <div className="flex justify-between mt-2 w-full">
            <div>
              {hasSubmitted && (
                <div className="text-center text-blue-700">Noted!</div>
              )}
            </div>
            <button
              className="bg-blue-500 enabled:hover:bg-blue-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed"
              disabled={isSubmitting || isLoading || hasSubmitted}
              onClick={() => {
                mutate({
                  title,
                  content,
                });
              }}
            >
              Add Note
            </button>
          </div>
          <div className="py-6">
            <div>
              {!data && isLoading && <div className="mb-6">...loading</div>}
              {Boolean(!data?.notes.length) && !isLoading && (
                <div className="mb-6">no notes!</div>
              )}
              {reversedNotes.map((note) => {
                return (
                  <div className="mb-6" key={note.id}>
                    <div className="flex justify-between items-baseline">
                      <div className="text-2xl">{note.title}</div>
                      <div className="text-gray-500">
                        {new Date(note.createdAt).toLocaleString()}
                      </div>
                    </div>
                    <hr className="border-gray-300" />
                    <p className="py-2">{note.content}</p>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

const FormField: React.FC<{
  label: string;
  children: React.ReactNode;
}> = ({ label, children }) => {
  return (
    <div className="flex flex-col justify-center mb-6">
      <label className="text-gray-700 text-md leading-loose">{label}</label>
      {children}
    </div>
  );
};

export default Home;
